{
    "type": [
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        2,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        2,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        2,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        2
    ],
    "data": [
        "  main = \"Classification Tree with All Variables\"",
        "+ ",
        ")",
        "> ",
        "> ",
        "# 在测试集上进行预测",
        "> ",
        "predictions <- predict(tree_model, newdata = testData, type = \"class\")",
        "> ",
        "> ",
        "# 评估模型",
        "> ",
        "conf_matrix <- confusionMatrix(predictions, testData$happy)",
        "> ",
        "print(conf_matrix)",
        "Confusion Matrix and Statistics\n\n               Reference\nPrediction      not too happy pretty happy very happy\n  not too happy             0            0          0\n  pretty happy             46          226        111\n  very happy                0            0          0\n\nOverall Statistics\n                                         \n               Accuracy : 0.5901         \n                 95% CI : (0.539, 0.6398)\n    No Information Rate : 0.5901         \n    P-Value [Acc > NIR] : 0.522          \n        ",
        "                                 \n                  Kappa : 0              \n                                         \n Mcnemar's Test P-Value : NA             \n\nStatistics by Class:\n\n                     Class: not too happy Class: pretty happy Class: very happy\nSensitivity                        0.0000              1.0000            0.0000\nSpecificity                        1.0000              0.0000            1.0000\nPos Pred Value                        NaN              0.5901               NaN\nNeg Pred ",
        "Value                     0.8799                 NaN            0.7102\nPrevalence                         0.1201              0.5901            0.2898\nDetection Rate                     0.0000              0.5901            0.0000\nDetection Prevalence               0.0000              1.0000            0.0000\nBalanced Accuracy                  0.5000              0.5000            0.5000\n",
        "> ",
        "# 加载数据",
        "> ",
        "data <- read_parquet(\"data/02-analysis_data/cleaned_happiness_data.parquet\")",
        "> ",
        "> ",
        "# 数据清理：移除缺失值",
        "> ",
        "data_cleaned <- na.omit(data[, c(\"happy\", \"age\", \"childs\", \"degree\", \"sex\", \"satjob\", \"realrinc\")])",
        "> ",
        "> ",
        "# 将目标变量转换为因子",
        "> ",
        "data_cleaned$happy <- as.factor(data_cleaned$happy)",
        "> ",
        "> ",
        "# 对分类变量进行编码（如 degree、sex、satjob）",
        "> ",
        "data_cleaned$degree <- as.factor(data_cleaned$degree)",
        "> ",
        "data_cleaned$sex <- as.factor(data_cleaned$sex)",
        "> ",
        "data_cleaned$satjob <- as.factor(data_cleaned$satjob)",
        "> ",
        "> ",
        "# 数据分割：70%训练集，30%测试集",
        "> ",
        "set.seed(42)",
        "> ",
        "trainIndex <- createDataPartition(data_cleaned$happy, p = 0.7, list = FALSE)",
        "> ",
        "trainData <- data_cleaned[trainIndex, ]",
        "> ",
        "testData <- data_cleaned[-trainIndex, ]",
        "> ",
        "> ",
        "# 构建分类树模型（使用所有变量）",
        "> ",
        "tree_model <- rpart(",
        "+ ",
        "  happy ~ age + childs + degree + sex + satjob + realrinc,",
        "+ ",
        "  data = trainData,",
        "+ ",
        "  method = \"class\",",
        "+ ",
        "  control = rpart.control(maxdepth = 5)  # 增加最大深度以捕捉更多模式",
        "+ ",
        ")",
        "> ",
        "> ",
        "# 可视化分类树",
        "> ",
        "rpart.plot(",
        "+ ",
        "  tree_model,",
        "+ ",
        "  type = 2,",
        "+ ",
        "  extra = 104,",
        "+ ",
        "  fallen.leaves = TRUE,",
        "+ ",
        "  box.palette = \"Blues\",  ",
        "+ ",
        "  main = \"Classification Tree with All Variables\"",
        "+ ",
        ")",
        "> ",
        "> ",
        "# 在测试集上进行预测",
        "> ",
        "predictions <- predict(tree_model, newdata = testData, type = \"class\")",
        "> ",
        "> ",
        "# 评估模型",
        "> ",
        "conf_matrix <- confusionMatrix(predictions, testData$happy)",
        "> ",
        "print(conf_matrix)",
        "Confusion Matrix and Statistics\n\n               Reference\nPrediction      not too happy pretty happy very happy\n  not too happy             0            0          0\n  pretty happy             46          226        111\n  very happy                0            0          0\n\nOverall Statistics\n                                         \n               Accuracy : 0.5901         \n                 95% CI : (0.539, 0.6398)\n    No Information Rate : 0.5901         \n    P-Value [Acc > NIR] : 0.522          \n        ",
        "                                 \n                  Kappa : 0              \n                                         \n Mcnemar's Test P-Value : NA             \n\nStatistics by Class:\n\n                     Class: not too happy Class: pretty happy Class: very happy\nSensitivity                        0.0000              1.0000            0.0000\nSpecificity                        1.0000              0.0000            1.0000\nPos Pred Value                        NaN              0.5901               NaN\nNeg Pred ",
        "Value                     0.8799                 NaN            0.7102\nPrevalence                         0.1201              0.5901            0.2898\nDetection Rate                     0.0000              0.5901            0.0000\nDetection Prevalence               0.0000              1.0000            0.0000\nBalanced Accuracy                  0.5000              0.5000            0.5000\n",
        "> ",
        "# 加载数据",
        "> ",
        "data <- read_parquet(\"data/02-analysis_data/cleaned_happiness_data.parquet\")",
        "> ",
        "> ",
        "# 数据清理：移除缺失值",
        "> ",
        "data_cleaned <- na.omit(data[, c(\"happy\", \"age\", \"childs\", \"degree\", \"sex\", \"satjob\", \"realrinc\")])",
        "> ",
        "> ",
        "# 将目标变量转换为因子",
        "> ",
        "data_cleaned$happy <- as.factor(data_cleaned$happy)",
        "> ",
        "> ",
        "# 对分类变量进行编码（如 degree、sex、satjob）",
        "> ",
        "data_cleaned$degree <- as.factor(data_cleaned$degree)",
        "> ",
        "data_cleaned$sex <- as.factor(data_cleaned$sex)",
        "> ",
        "data_cleaned$satjob <- as.factor(data_cleaned$satjob)",
        "> ",
        "> ",
        "# 数据分割：70%训练集，30%测试集",
        "> ",
        "set.seed(42)",
        "> ",
        "trainIndex <- createDataPartition(data_cleaned$happy, p = 0.7, list = FALSE)",
        "> ",
        "trainData <- data_cleaned[trainIndex, ]",
        "> ",
        "testData <- data_cleaned[-trainIndex, ]",
        "> ",
        "> ",
        "# 构建分类树模型（使用所有变量）",
        "> ",
        "tree_model <- rpart(",
        "+ ",
        "  happy ~ age + childs + degree + sex + satjob + realrinc,",
        "+ ",
        "  data = trainData,",
        "+ ",
        "  method = \"class\",",
        "+ ",
        "  control = rpart.control(maxdepth = 5)  # 增加最大深度以捕捉更多模式",
        "+ ",
        ")",
        "> ",
        "> ",
        "# 可视化分类树",
        "> ",
        "rpart.plot(",
        "+ ",
        "  tree_model,",
        "+ ",
        "  type = 2,",
        "+ ",
        "  extra = 104,",
        "+ ",
        "  fallen.leaves = TRUE,",
        "+ ",
        "  box.palette = \"Blues\",  ",
        "+ ",
        "  main = \"Classification Tree with All Variables\"",
        "+ ",
        ")",
        "> ",
        "> ",
        "# 在测试集上进行预测",
        "> ",
        "predictions <- predict(tree_model, newdata = testData, type = \"class\")",
        "> ",
        "> ",
        "# 生成混淆矩阵",
        "> ",
        "conf_matrix <- confusionMatrix(predictions, testData$happy)",
        "> ",
        "> ",
        "# 打印混淆矩阵和统计结果",
        "> ",
        "print(conf_matrix)",
        "Confusion Matrix and Statistics\n\n               Reference\nPrediction      not too happy pretty happy very happy\n  not too happy             0            0          0\n  pretty happy             46          226        111\n  very happy                0            0          0\n\nOverall Statistics\n                                         \n               Accuracy : 0.5901         \n                 95% CI : (0.539, 0.6398)\n    No Information Rate : 0.5901         \n    P-Value [Acc > NIR] : 0.522          \n        ",
        "                                 \n                  Kappa : 0              \n                                         \n Mcnemar's Test P-Value : NA             \n\nStatistics by Class:\n\n                     Class: not too happy Class: pretty happy Class: very happy\nSensitivity                        0.0000              1.0000            0.0000\nSpecificity                        1.0000              0.0000            1.0000\nPos Pred Value                        NaN              0.5901               NaN\nNeg Pred ",
        "Value                     0.8799                 NaN            0.7102\nPrevalence                         0.1201              0.5901            0.2898\nDetection Rate                     0.0000              0.5901            0.0000\nDetection Prevalence               0.0000              1.0000            0.0000\nBalanced Accuracy                  0.5000              0.5000            0.5000\n",
        "> ",
        "> ",
        "# 提取关键信息（如准确率）",
        "> ",
        "cat(\"Model Accuracy: \", conf_matrix$overall['Accuracy'], \"\\n\")",
        "Model Accuracy:  0.5900783 \n",
        "> ",
        "#| echo: false",
        "> ",
        "#| warning: false",
        "> ",
        "#| label: fig-Marital",
        "> ",
        "#| fig-cap: Happiness Levels Across Different Marital Statuses",
        "> ",
        "> ",
        "> ",
        "# Filter out rows with NA values in 'happy' or 'marital'",
        "> ",
        "data <- data %>%",
        "+ ",
        "  filter(!is.na(happy), !is.na(marital)) %>%  # Exclude rows with NA in 'happy' or 'marital'",
        "+ ",
        "  mutate(",
        "+ ",
        "    happy = as.factor(happy),",
        "+ ",
        "    marital = as.factor(marital)",
        "+ ",
        "  )",
        "> ",
        "> ",
        "# Plot: Happiness Distribution By Marital Status",
        "> ",
        "ggplot(data, aes(x = marital, fill = happy)) +",
        "+ ",
        "  geom_bar(position = \"dodge\") +",
        "+ ",
        "  scale_fill_manual(values = c(",
        "+ ",
        "    \"pretty happy\" = \"#41AB5D\",  # Dark green",
        "+ ",
        "    \"very happy\" = \"#00441B\",    # Medium green",
        "+ ",
        "    \"not too happy\" = \"#A1D99B\"  # Light green",
        "+ ",
        "  )) +",
        "+ ",
        "  theme_minimal() +",
        "+ ",
        "  labs(",
        "+ ",
        "    x = \"Marital Status\",",
        "+ ",
        "    y = \"Count\",",
        "+ ",
        "    fill = \"Happiness Level\"",
        "+ ",
        "  ) +",
        "+ ",
        "  theme(",
        "+ ",
        "    axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels",
        "+ ",
        "    plot.title = element_text(face = \"bold\", hjust = 0.5),  # Center and bold the title",
        "+ ",
        "    panel.grid.major = element_blank(),  # Remove gridlines",
        "+ ",
        "    panel.grid.minor = element_blank()",
        "+ ",
        "  )",
        "> ",
        "> ",
        "> ",
        "> ",
        "#| echo: false",
        "> ",
        "#| warning: false",
        "> ",
        "#| label: fig-Marital",
        "> ",
        "#| fig-cap: Happiness Levels Across Different Marital Statuses",
        "> ",
        "> ",
        "> ",
        "# Filter out rows with NA values in 'happy' or 'marital'",
        "> ",
        "data <- data %>%",
        "+ ",
        "  filter(!is.na(happy), !is.na(marital)) %>%  # Exclude rows with NA in 'happy' or 'marital'",
        "+ ",
        "  mutate(",
        "+ ",
        "    happy = as.factor(happy),",
        "+ ",
        "    marital = as.factor(marital)",
        "+ ",
        "  )",
        "> ",
        "> ",
        "# Plot: Happiness Distribution By Marital Status",
        "> ",
        "ggplot(data, aes(x = marital, fill = happy)) +",
        "+ ",
        "  geom_bar(position = \"dodge\") +",
        "+ ",
        "  scale_fill_manual(values = c(",
        "+ ",
        "    \"pretty happy\" = \"#41AB5D\",  # Dark green",
        "+ ",
        "    \"very happy\" = \"#00441B\",    # Medium green",
        "+ ",
        "    \"not too happy\" = \"#A1D99B\"  # Light green",
        "+ ",
        "  )) +",
        "+ ",
        "  theme_minimal() +",
        "+ ",
        "  labs(",
        "+ ",
        "    x = \"Marital Status\",",
        "+ ",
        "    y = \"Count\",",
        "+ ",
        "    fill = \"Happiness Level\"",
        "+ ",
        "  ) +",
        "+ ",
        "  theme(",
        "+ ",
        "    axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels",
        "+ ",
        "    plot.title = element_text(face = \"bold\", hjust = 0.5),  # Center and bold the title",
        "+ ",
        "    panel.grid.major = element_blank(),  # Remove gridlines",
        "+ ",
        "    panel.grid.minor = element_blank()",
        "+ ",
        "  )",
        "> ",
        "> ",
        "> ",
        "> ",
        "#| echo: false",
        "> ",
        "#| warning: false",
        "> ",
        "#| label: fig-Childs",
        "> ",
        "#| fig-cap: Distribution of the Number of Children by Happiness Level",
        "> ",
        "> ",
        "> ",
        "# Filter out non-finite values (NA or Inf)",
        "> ",
        "data <- data %>%",
        "+ ",
        "  filter(!is.na(childs), is.finite(childs))  # Remove NA or infinite values",
        "> ",
        "> ",
        "# Create a violin plot with jittered points",
        "> ",
        "ggplot(data, aes(x = happy, y = childs, fill = happy)) +",
        "+ ",
        "  geom_violin(trim = TRUE, alpha = 0.7) +  # Violin plot to show distribution",
        "+ ",
        "  geom_jitter(width = 0.2, alpha = 0.4, color = \"black\", size = 1) +  # Add jitter points for raw data",
        "+ ",
        "  scale_fill_manual(values = c(",
        "+ ",
        "    \"pretty happy\" = \"#41AB5D\",  # Dark green",
        "+ ",
        "    \"very happy\" = \"#00441B\",    # Medium green",
        "+ ",
        "    \"not too happy\" = \"#A1D99B\"  # Light green",
        "+ ",
        "  )) +",
        "+ ",
        "  theme_minimal() +",
        "+ ",
        "  labs(",
        "+ ",
        "    title = \"Number of Children by Happiness Level\",",
        "+ ",
        "    x = \"Happiness Level\",",
        "+ ",
        "    y = \"Number of Children\",",
        "+ ",
        "    fill = \"Happiness Level\"",
        "+ ",
        "  ) +",
        "+ ",
        "  theme(",
        "+ ",
        "    axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels",
        "+ ",
        "    plot.title = element_text(face = \"bold\", hjust = 0.5),  # Bold and center the title",
        "+ ",
        "    legend.title = element_text(face = \"bold\"),  # Bold legend title",
        "+ ",
        "    panel.grid.major = element_blank(),  # Optionally remove gridlines",
        "+ ",
        "    panel.grid.minor = element_blank()",
        "+ ",
        "Error: Incomplete expression: ggplot(data, aes(x = happy, y = childs, fill = happy)) +\n  geom_violin(trim = TRUE, alpha = 0.7) +  # Violin plot to show distribution\n  geom_jitter(width = 0.2, alpha = 0.4, color = \"black\", size = 1) +  # Add jitter points for raw data\n  scale_fill_manual(values = c(\n    \"pretty happy\" = \"#41AB5D\",  # Dark green\n    \"very happy\" = \"#00441B\",    # Medium green\n    \"not too happy\" = \"#A1D99B\"  # Light green\n  )) +\n  theme_minimal() +\n  labs(\n    title = \"Number of Children by H",
        "appiness Level\",\n    x = \"Happiness Level\",\n    y = \"Number of Children\",\n    fill = \"Happiness Level\"\n  ) +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels\n    plot.title = element_text(face = \"bold\", hjust = 0.5),  # Bold and center the title\n    legend.title = element_text(face = \"bold\"),  # Bold legend title\n    panel.grid.major = element_blank(),  # Optionally remove gridlines\n    panel.grid.minor = element_blank()\n",
        "> ",
        "#| echo: false",
        "> ",
        "#| warning: false",
        "> ",
        "#| label: fig-Childs",
        "> ",
        "#| fig-cap: Distribution of the Number of Children by Happiness Level",
        "> ",
        "> ",
        "> ",
        "# Filter out non-finite values (NA or Inf)",
        "> ",
        "data <- data %>%",
        "+ ",
        "  filter(!is.na(childs), is.finite(childs))  # Remove NA or infinite values",
        "> ",
        "> ",
        "# Create a violin plot with jittered points",
        "> ",
        "ggplot(data, aes(x = happy, y = childs, fill = happy)) +",
        "+ ",
        "  geom_violin(trim = TRUE, alpha = 0.7) +  # Violin plot to show distribution",
        "+ ",
        "  geom_jitter(width = 0.2, alpha = 0.4, color = \"black\", size = 1) +  # Add jitter points for raw data",
        "+ ",
        "  scale_fill_manual(values = c(",
        "+ ",
        "    \"pretty happy\" = \"#41AB5D\",  # Dark green",
        "+ ",
        "    \"very happy\" = \"#00441B\",    # Medium green",
        "+ ",
        "    \"not too happy\" = \"#A1D99B\"  # Light green",
        "+ ",
        "  )) +",
        "+ ",
        "  theme_minimal() +",
        "+ ",
        "  labs(",
        "+ ",
        "    title = \"Number of Children by Happiness Level\",",
        "+ ",
        "    x = \"Happiness Level\",",
        "+ ",
        "    y = \"Number of Children\",",
        "+ ",
        "    fill = \"Happiness Level\"",
        "+ ",
        "  ) +",
        "+ ",
        "  theme(",
        "+ ",
        "    axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels",
        "+ ",
        "    plot.title = element_text(face = \"bold\", hjust = 0.5),  # Bold and center the title",
        "+ ",
        "    legend.title = element_text(face = \"bold\"),  # Bold legend title",
        "+ ",
        "    panel.grid.major = element_blank(),  # Remove major gridlines",
        "+ ",
        "    panel.grid.minor = element_blank()   # Remove minor gridlines",
        "+ ",
        "  )",
        "> ",
        "> ",
        "#| echo: false",
        "> ",
        "#| warning: false",
        "> ",
        "#| label: fig-Childs",
        "> ",
        "#| fig-cap: Distribution of the Number of Children by Happiness Level",
        "> ",
        "> ",
        "> ",
        "# Filter out non-finite values (NA or Inf)",
        "> ",
        "data <- data %>%",
        "+ ",
        "  filter(!is.na(childs), is.finite(childs))  # Remove NA or infinite values",
        "> ",
        "> ",
        "# Create a violin plot with jittered points",
        "> ",
        "ggplot(data, aes(x = happy, y = childs, fill = happy)) +",
        "+ ",
        "  geom_violin(trim = TRUE, alpha = 0.7) +  # Violin plot to show distribution",
        "+ ",
        "  geom_jitter(width = 0.2, alpha = 0.4, color = \"black\", size = 1) +  # Add jitter points for raw data",
        "+ ",
        "  scale_fill_manual(values = c(",
        "+ ",
        "    \"pretty happy\" = \"#41AB5D\",  # Dark green",
        "+ ",
        "    \"very happy\" = \"#00441B\",    # Medium green",
        "+ ",
        "    \"not too happy\" = \"#A1D99B\"  # Light green",
        "+ ",
        "  )) +",
        "+ ",
        "  theme_minimal() +",
        "+ ",
        "  labs(",
        "+ ",
        "    x = \"Happiness Level\",",
        "+ ",
        "    y = \"Number of Children\",",
        "+ ",
        "    fill = \"Happiness Level\"",
        "+ ",
        "  ) +",
        "+ ",
        "  theme(",
        "+ ",
        "    axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels",
        "+ ",
        "    plot.title = element_text(face = \"bold\", hjust = 0.5),  # Bold and center the title",
        "+ ",
        "    legend.title = element_text(face = \"bold\"),  # Bold legend title",
        "+ ",
        "    panel.grid.major = element_blank(),  # Remove major gridlines",
        "+ ",
        "    panel.grid.minor = element_blank()   # Remove minor gridlines",
        "+ ",
        "  )",
        "> ",
        "> ",
        "#| echo: false",
        "> ",
        "#| warning: false",
        "> ",
        "#| label: fig-Marital-Status",
        "> ",
        "#| fig-cap: \"Happiness Levels Across Different Marital Statuses: Depicting the Distribution of Self-Reported Happiness Levels ('Very Happy', 'Pretty Happy', 'Not Too Happy') by Marital Status Categories\"",
        "> ",
        "> ",
        "> ",
        "# Filter out rows with NA values in 'happy' or 'marital'",
        "> ",
        "data <- data %>%",
        "+ ",
        "  filter(!is.na(happy), !is.na(marital)) %>%  # Exclude rows with NA in 'happy' or 'marital'",
        "+ ",
        "  mutate(",
        "+ ",
        "    happy = as.factor(happy),",
        "+ ",
        "    marital = as.factor(marital)",
        "+ ",
        "  )",
        "> ",
        "> ",
        "# Plot: Happiness Distribution By Marital Status",
        "> ",
        "ggplot(data, aes(x = marital, fill = happy)) +",
        "+ ",
        "  geom_bar(position = \"dodge\") +",
        "+ ",
        "  scale_fill_manual(values = c(",
        "+ ",
        "    \"pretty happy\" = \"#41AB5D\",  # Dark green",
        "+ ",
        "    \"very happy\" = \"#00441B\",    # Medium green",
        "+ ",
        "    \"not too happy\" = \"#A1D99B\"  # Light green",
        "+ ",
        "  )) +",
        "+ ",
        "  theme_minimal() +",
        "+ ",
        "  labs(",
        "+ ",
        "    x = \"Marital Status\",",
        "+ ",
        "    y = \"Count\",",
        "+ ",
        "    fill = \"Happiness Level\"",
        "+ ",
        "  ) +",
        "+ ",
        "  theme(",
        "+ ",
        "    axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels",
        "+ ",
        "    plot.title = element_text(face = \"bold\", hjust = 0.5),  # Center and bold the title",
        "+ ",
        "    panel.grid.major = element_blank(),  # Remove gridlines",
        "+ ",
        "    panel.grid.minor = element_blank()",
        "+ ",
        "  )",
        "> ",
        "> ",
        "> ",
        "> ",
        "# 加载必要的包",
        "> ",
        "library(dplyr)",
        "> ",
        "> ",
        "# 加载数据",
        "> ",
        "data <- read.csv(\"cleaned_happiness_data.csv\")",
        "Error in file(file, \"rt\") : cannot open the connection\nIn addition: Warning message:\nIn file(file, \"rt\") :\n  cannot open file 'cleaned_happiness_data.csv': No such file or directory\n",
        "> ",
        "# 加载必要的包",
        "> ",
        "library(dplyr)",
        "> ",
        "> ",
        "# 加载数据",
        "> ",
        "data <- read_parquet(\"data/02-analysis_data/cleaned_happiness_data.parquet\")",
        "> ",
        "# 检查数据",
        "> ",
        "str(data)",
        "tibble [2,859 × 11] (S3: tbl_df/tbl/data.frame)\n $ year    : num [1:2859] 2016 2016 2016 2016 2016 ...\n $ id_     : num [1:2859] 1 2 3 4 5 6 7 8 9 10 ...\n $ marital : chr [1:2859] \"married\" \"never married\" \"married\" \"married\" ...\n $ childs  : num [1:2859] 3 0 2 4 2 2 2 3 3 4 ...\n $ age     : num [1:2859] 47 61 72 43 55 53 50 23 45 71 ...\n $ degree  : chr [1:2859] \"bachelor's\" \"high school\" \"bachelor's\" \"high school\" ...\n $ sex     : chr [1:2859] \"male\" \"male\" \"male\" \"female\" ...\n $ happy   : chr [1:2859] \"",
        "pretty happy\" \"pretty happy\" \"very happy\" \"pretty happy\" ...\n $ satjob  : chr [1:2859] \"moderately satisfied\" \"very satisfied\" NA \"very satisfied\" ...\n $ realrinc: num [1:2859] 164382 25740 NA 5265 936 ...\n $ ballot  : chr [1:2859] \"ballot a\" \"ballot b\" \"ballot c\" \"ballot a\" ...\n",
        "> ",
        "summary(data)",
        "      year           id_           marital              childs           age           degree              sex           \n Min.   :2016   Min.   :   1.0   Length:2859        Min.   :0.000   Min.   :18.00   Length:2859        Length:2859       \n 1st Qu.:2016   1st Qu.: 717.5   Class :character   1st Qu.:0.000   1st Qu.:34.00   Class :character   Class :character  \n Median :2016   Median :1435.0   Mode  :character   Median :2.000   Median :49.00   Mode  :character   Mode  :character  \n Mean   :2016   Mean   :",
        "1434.9                      Mean   :1.848   Mean   :48.85                                        \n 3rd Qu.:2016   3rd Qu.:2151.5                      3rd Qu.:3.000   3rd Qu.:62.00                                        \n Max.   :2016   Max.   :2867.0                      Max.   :8.000   Max.   :88.00                                        \n                                                    NA's   :6       NA's   :32                                           \n    happy              satjob             realri",
        "nc         ballot         \n Length:2859        Length:2859        Min.   :   234   Length:2859       \n Class :character   Class :character   1st Qu.:  7605   Class :character  \n Mode  :character   Mode  :character   Median : 15210   Mode  :character  \n                                       Mean   : 23747                     \n                                       3rd Qu.: 31590                     \n                                       Max.   :164382                     \n                                   ",
        "    NA's   :1228                       \n",
        "> ",
        "> ",
        "# 处理目标变量happy，将其转换为二分类 (例如: \"very happy\" vs 其他)",
        "> ",
        "data$happy_binary <- ifelse(data$happy == \"very happy\", 1, 0)",
        "> ",
        "> ",
        "# 检查是否有缺失值",
        "> ",
        "colSums(is.na(data))",
        "        year          id_      marital       childs          age       degree          sex        happy       satjob \n           0            0            1            6           32            5            0            0         1084 \n    realrinc       ballot happy_binary \n        1228            0            0 \n",
        "> ",
        "> ",
        "# 简单的数据清洗：移除含有缺失值的行",
        "> ",
        "clean_data <- na.omit(data)",
        "> ",
        "> ",
        "# 选择相关变量用于回归",
        "> ",
        "model_data <- clean_data %>%",
        "+ ",
        "  select(happy_binary, marital, childs, age, degree, sex, satjob, realrinc)",
        "> ",
        "> ",
        "# 将分类变量转化为因子",
        "> ",
        "model_data$marital <- as.factor(model_data$marital)",
        "> ",
        "model_data$degree <- as.factor(model_data$degree)",
        "> ",
        "model_data$sex <- as.factor(model_data$sex)",
        "> ",
        "model_data$satjob <- as.factor(model_data$satjob)",
        "> ",
        "> ",
        "# 拟合逻辑回归模型",
        "> ",
        "logit_model <- glm(happy_binary ~ marital + childs + age + degree + sex + satjob + realrinc, ",
        "+ ",
        "                   data = model_data, family = binomial())",
        "> ",
        "> ",
        "# 查看模型摘要",
        "> ",
        "summary(logit_model)",
        "\nCall:\nglm(formula = happy_binary ~ marital + childs + age + degree + \n    sex + satjob + realrinc, family = binomial(), data = model_data)\n\nCoefficients:\n                              Estimate Std. Error z value Pr(>|z|)    \n(Intercept)                 -2.174e+00  4.859e-01  -4.475 7.65e-06 ***\nmaritalmarried               9.558e-01  2.018e-01   4.737 2.17e-06 ***\nmaritalnever married        -1.671e-01  2.480e-01  -0.674   0.5004    \nmaritalseparated             1.643e-01  4.171e-01   0.394   0.6936    \nma",
        "ritalwidowed               5.450e-01  4.062e-01   1.342   0.1797    \nchilds                      -1.016e-01  5.288e-02  -1.922   0.0547 .  \nage                         -7.015e-03  5.667e-03  -1.238   0.2158    \ndegreebachelor's             3.606e-01  2.864e-01   1.259   0.2080    \ndegreegraduate               2.468e-01  3.075e-01   0.803   0.4222    \ndegreehigh school            3.072e-01  2.673e-01   1.149   0.2505    \ndegreeless than high school  7.720e-01  3.468e-01   2.226   0.0260 *  \nsexmale          ",
        "           -9.858e-02  1.361e-01  -0.724   0.4689    \nsatjobmoderately satisfied   2.892e-01  3.096e-01   0.934   0.3503    \nsatjobvery dissatisfied     -1.672e-01  5.613e-01  -0.298   0.7658    \nsatjobvery satisfied         1.439e+00  2.964e-01   4.854 1.21e-06 ***\nrealrinc                     2.818e-06  2.254e-06   1.250   0.2112    \n---\nSignif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 1545.7  o",
        "n 1283  degrees of freedom\nResidual deviance: 1388.5  on 1268  degrees of freedom\nAIC: 1420.5\n\nNumber of Fisher Scoring iterations: 4\n\n",
        "> ",
        "> ",
        "# 可视化模型结果 (可选)",
        "> ",
        "library(ggplot2)",
        "> ",
        "library(broom)",
        "> ",
        "> ",
        "tidy_model <- tidy(logit_model, exponentiate = TRUE, conf.int = TRUE)",
        "> ",
        "ggplot(tidy_model, aes(x = term, y = estimate, ymin = conf.low, ymax = conf.high)) +",
        "+ ",
        "  geom_pointrange() +",
        "+ ",
        "  coord_flip() +",
        "+ ",
        "  theme_minimal() +",
        "+ ",
        "  labs(title = \"Logistic Regression Coefficients\", x = \"Variables\", y = \"Odds Ratio\")",
        "> ",
        "> ",
        "# 预测并评估模型",
        "> ",
        "clean_data$predicted <- predict(logit_model, newdata = clean_data, type = \"response\")",
        "> ",
        "clean_data$predicted_class <- ifelse(clean_data$predicted > 0.5, 1, 0)",
        "> ",
        "> ",
        "# 混淆矩阵",
        "> ",
        "table(clean_data$happy_binary, clean_data$predicted_class)",
        "   \n      0   1\n  0 824  88\n  1 267 105\n",
        "> ",
        "> ",
        "# 计算模型的准确率",
        "> ",
        "accuracy <- mean(clean_data$happy_binary == clean_data$predicted_class)",
        "> ",
        "print(paste(\"模型准确率:\", round(accuracy, 3)))",
        "[1] \"模型准确率: 0.724\"\n",
        "> ",
        "library(rpart)",
        "> ",
        "# 拟合决策树模型",
        "> ",
        "tree_model <- rpart(happy_binary ~ marital + childs + age + degree + sex + satjob + realrinc, ",
        "+ ",
        "                    data = data, method = \"class\")",
        "> ",
        "> ",
        "# 查看决策树结构",
        "> ",
        "print(tree_model)",
        "n= 2859 \n\nnode), split, n, loss, yval, (yprob)\n      * denotes terminal node\n\n1) root 2859 806 0 (0.7180832 0.2819168) *\n",
        "> ",
        "> ",
        "# 生成预测",
        "> ",
        "tree_pred <- predict(tree_model, newdata = data, type = \"class\")",
        "> ",
        "> ",
        "# 生成混淆矩阵",
        "> ",
        "tree_confusion <- table(Predicted = tree_pred, Actual = data$happy_binary)",
        "> ",
        "print(tree_confusion)",
        "         Actual\nPredicted    0    1\n        0 2053  806\n        1    0    0\n",
        "> ",
        "> ",
        "# 计算准确率",
        "> ",
        "tree_accuracy <- sum(diag(tree_confusion)) / sum(tree_confusion)",
        "> ",
        "print(paste(\"决策树模型准确率:\", round(tree_accuracy * 100, 2), \"%\"))",
        "[1] \"决策树模型准确率: 71.81 %\"\n",
        "> ",
        "# 加载必要的包",
        "> ",
        "library(rpart)",
        "> ",
        "library(rpart.plot)",
        "> ",
        "library(caret)  # 用于数据分割和评估",
        "> ",
        "> ",
        "# 加载数据",
        "> ",
        "data <- read_parquet(\"data/02-analysis_data/cleaned_happiness_data.parquet\")",
        "> ",
        "> ",
        "# 数据清理：移除缺失值",
        "> ",
        "data_cleaned <- na.omit(data[, c(\"happy\", \"age\", \"childs\", \"degree\", \"sex\", \"satjob\", \"realrinc\")])",
        "> ",
        "> ",
        "# 将目标变量转换为因子",
        "> ",
        "data_cleaned$happy <- as.factor(data_cleaned$happy)",
        "> ",
        "> ",
        "# 对分类变量进行编码（如 degree、sex、satjob）",
        "> ",
        "data_cleaned$degree <- as.factor(data_cleaned$degree)",
        "> ",
        "data_cleaned$sex <- as.factor(data_cleaned$sex)",
        "> ",
        "data_cleaned$satjob <- as.factor(data_cleaned$satjob)",
        "> ",
        "> ",
        "# 数据分割：70%训练集，30%测试集",
        "> ",
        "set.seed(42)",
        "> ",
        "trainIndex <- createDataPartition(data_cleaned$happy, p = 0.7, list = FALSE)",
        "> ",
        "trainData <- data_cleaned[trainIndex, ]",
        "> ",
        "testData <- data_cleaned[-trainIndex, ]",
        "> ",
        "> ",
        "# 构建分类树模型（使用所有变量）",
        "> ",
        "tree_model <- rpart(",
        "+ ",
        "  happy ~ age + childs + degree + sex + satjob + realrinc,",
        "+ ",
        "  data = trainData,",
        "+ ",
        "  method = \"class\",",
        "+ ",
        "  control = rpart.control(maxdepth = 5)  # 增加最大深度以捕捉更多模式",
        "+ ",
        ")",
        "> ",
        "> ",
        "# 可视化分类树",
        "> ",
        "rpart.plot(",
        "+ ",
        "  tree_model,",
        "+ ",
        "  type = 2,",
        "+ ",
        "  extra = 104,",
        "+ ",
        "  fallen.leaves = TRUE,",
        "+ ",
        "  box.palette = \"Blues\",  ",
        "+ ",
        "  main = \"Classification Tree with All Variables\"",
        "+ ",
        ")",
        "> ",
        "> ",
        "# 在测试集上进行预测",
        "> ",
        "predictions <- predict(tree_model, newdata = testData, type = \"class\")",
        "> ",
        "> ",
        "# 生成混淆矩阵",
        "> ",
        "conf_matrix <- confusionMatrix(predictions, testData$happy)",
        "> ",
        "> ",
        "# 打印混淆矩阵和统计结果",
        "> ",
        "print(conf_matrix)",
        "Confusion Matrix and Statistics\n\n               Reference\nPrediction      not too happy pretty happy very happy\n  not too happy             0            0          0\n  pretty happy             46          226        111\n  very happy                0            0          0\n\nOverall Statistics\n                                         \n               Accuracy : 0.5901         \n                 95% CI : (0.539, 0.6398)\n    No Information Rate : 0.5901         \n    P-Value [Acc > NIR] : 0.522          \n        ",
        "                                 \n                  Kappa : 0              \n                                         \n Mcnemar's Test P-Value : NA             \n\nStatistics by Class:\n\n                     Class: not too happy Class: pretty happy Class: very happy\nSensitivity                        0.0000              1.0000            0.0000\nSpecificity                        1.0000              0.0000            1.0000\nPos Pred Value                        NaN              0.5901               NaN\nNeg Pred ",
        "Value                     0.8799                 NaN            0.7102\nPrevalence                         0.1201              0.5901            0.2898\nDetection Rate                     0.0000              0.5901            0.0000\nDetection Prevalence               0.0000              1.0000            0.0000\nBalanced Accuracy                  0.5000              0.5000            0.5000\n",
        "> ",
        "> ",
        "# 提取关键信息（如准确率）",
        "> ",
        "cat(\"Model Accuracy: \", conf_matrix$overall['Accuracy'], \"\\n\")",
        "Model Accuracy:  0.5900783 \n",
        "> ",
        "# Load necessary packages",
        "> ",
        "library(rpart)",
        "> ",
        "library(rpart.plot)",
        "> ",
        "library(caret)  # For data splitting and evaluation",
        "> ",
        "> ",
        "# Load data",
        "> ",
        "data <- read_parquet(\"data/02-analysis_data/cleaned_happiness_data.parquet\")",
        "> ",
        "> ",
        "# Data cleaning: Remove missing values",
        "> ",
        "data_cleaned <- na.omit(data[, c(\"happy\", \"age\", \"childs\", \"degree\", \"sex\", \"satjob\", \"realrinc\")])",
        "> ",
        "> ",
        "# Convert the target variable to a factor",
        "> ",
        "data_cleaned$happy <- as.factor(data_cleaned$happy)",
        "> ",
        "> ",
        "# Encode categorical variables (e.g., degree, sex, satjob)",
        "> ",
        "data_cleaned$degree <- as.factor(data_cleaned$degree)",
        "> ",
        "data_cleaned$sex <- as.factor(data_cleaned$sex)",
        "> ",
        "data_cleaned$satjob <- as.factor(data_cleaned$satjob)",
        "> ",
        "> ",
        "# Split data: 70% training set, 30% testing set",
        "> ",
        "set.seed(42)",
        "> ",
        "trainIndex <- createDataPartition(data_cleaned$happy, p = 0.7, list = FALSE)",
        "> ",
        "trainData <- data_cleaned[trainIndex, ]",
        "> ",
        "testData <- data_cleaned[-trainIndex, ]",
        "> ",
        "> ",
        "# Build classification tree model (using all variables)",
        "> ",
        "tree_model <- rpart(",
        "+ ",
        "  happy ~ age + childs + degree + sex + satjob + realrinc,",
        "+ ",
        "  data = trainData,",
        "+ ",
        "  method = \"class\",",
        "+ ",
        "  control = rpart.control(maxdepth = 5)  # Increase depth to capture more patterns",
        "+ ",
        ")",
        "> ",
        "> ",
        "# Visualize the classification tree",
        "> ",
        "rpart.plot(",
        "+ ",
        "  tree_model,",
        "+ ",
        "  type = 2,",
        "+ ",
        "  extra = 104,",
        "+ ",
        "  fallen.leaves = TRUE,",
        "+ ",
        "  box.palette = \"Blues\",  ",
        "+ ",
        "  main = \"Classification Tree with All Variables\"",
        "+ ",
        ")",
        "> ",
        "> ",
        "# Make predictions on the testing set",
        "> ",
        "predictions <- predict(tree_model, newdata = testData, type = \"class\")",
        "> ",
        "> ",
        "# Generate confusion matrix",
        "> ",
        "conf_matrix <- confusionMatrix(predictions, testData$happy)",
        "> ",
        "> ",
        "# Print confusion matrix and statistics",
        "> ",
        "print(conf_matrix)",
        "Confusion Matrix and Statistics\n\n               Reference\nPrediction      not too happy pretty happy very happy\n  not too happy             0            0          0\n  pretty happy             46          226        111\n  very happy                0            0          0\n\nOverall Statistics\n                                         \n               Accuracy : 0.5901         \n                 95% CI : (0.539, 0.6398)\n    No Information Rate : 0.5901         \n    P-Value [Acc > NIR] : 0.522          \n        ",
        "                                 \n                  Kappa : 0              \n                                         \n Mcnemar's Test P-Value : NA             \n\nStatistics by Class:\n\n                     Class: not too happy Class: pretty happy Class: very happy\nSensitivity                        0.0000              1.0000            0.0000\nSpecificity                        1.0000              0.0000            1.0000\nPos Pred Value                        NaN              0.5901               NaN\nNeg Pred ",
        "Value                     0.8799                 NaN            0.7102\nPrevalence                         0.1201              0.5901            0.2898\nDetection Rate                     0.0000              0.5901            0.0000\nDetection Prevalence               0.0000              1.0000            0.0000\nBalanced Accuracy                  0.5000              0.5000            0.5000\n",
        "> ",
        "> ",
        "# Extract key information (e.g., accuracy)",
        "> ",
        "cat(\"Model Accuracy: \", conf_matrix$overall['Accuracy'], \"\\n\")",
        "Model Accuracy:  0.5900783 \n",
        "> ",
        "summary(tree_model)",
        "Call:\nrpart(formula = happy ~ age + childs + degree + sex + satjob + \n    realrinc, data = trainData, method = \"class\", control = rpart.control(maxdepth = 5))\n  n= 901 \n\n           CP nsplit rel error xerror xstd\n1 0.008086253      0         1      0    0\n\nNode number 1: 901 observations\n  predicted class=pretty happy  expected loss=0.4117647  P(node) =1\n    class counts:   110   530   261\n   probabilities: 0.122 0.588 0.290 \n\n",
        "> ",
        "# 加载必要的包",
        "> ",
        "library(caret)  # 用于数据分割和评估",
        "> ",
        "library(dplyr)  # 数据清理与变换",
        "> ",
        "> ",
        "# 加载数据",
        "> ",
        "data <- read_parquet(\"data/02-analysis_data/cleaned_happiness_data.parquet\")",
        "> ",
        "> ",
        "# 数据清理：移除缺失值",
        "> ",
        "data_cleaned <- na.omit(data[, c(\"happy\", \"age\", \"childs\", \"degree\", \"sex\", \"satjob\", \"realrinc\")])",
        "> ",
        "> ",
        "# 将目标变量转换为因子（以便处理多分类问题）",
        "> ",
        "data_cleaned$happy <- as.factor(data_cleaned$happy)",
        "> ",
        "data_cleaned$degree <- as.factor(data_cleaned$degree)",
        "> ",
        "data_cleaned$sex <- as.factor(data_cleaned$sex)",
        "> ",
        "data_cleaned$satjob <- as.factor(data_cleaned$satjob)",
        "> ",
        "> ",
        "# 数据分割：70%训练集，30%测试集",
        "> ",
        "set.seed(42)",
        "> ",
        "trainIndex <- createDataPartition(data_cleaned$happy, p = 0.7, list = FALSE)",
        "> ",
        "trainData <- data_cleaned[trainIndex, ]",
        "> ",
        "testData <- data_cleaned[-trainIndex, ]",
        "> ",
        "> ",
        "# --- 构建逻辑回归模型 ---",
        "> ",
        "# 拟合多分类逻辑回归模型",
        "> ",
        "logistic_model <- multinom(happy ~ age + childs + degree + sex + satjob + realrinc, data = trainData)",
        "Error in multinom(happy ~ age + childs + degree + sex + satjob + realrinc,  : \n  could not find function \"multinom\"\n",
        "> ",
        ")install.packages('nnet')",
        "Error: unexpected ')' in \")\"\n",
        "> ",
        "install.packages('nnet')",
        "Error in install.packages : Updating loaded packages\n\nRestarting R session...\n\n"
    ]
}