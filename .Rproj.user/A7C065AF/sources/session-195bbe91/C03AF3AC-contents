# Load necessary libraries
library(rpart)
library(rpart.plot)
library(caret)  # For data splitting and evaluation


# 加载数据
data <- read_parquet("data/02-analysis_data/cleaned_happiness_data.parquet")

# 数据清理：移除缺失值
data_cleaned <- na.omit(data[, c("happy", "age", "childs", "degree", "sex", "satjob", "realrinc")])

# 将目标变量转换为因子
data_cleaned$happy <- as.factor(data_cleaned$happy)

# 对分类变量进行编码（如 degree、sex、satjob）
data_cleaned$degree <- as.factor(data_cleaned$degree)
data_cleaned$sex <- as.factor(data_cleaned$sex)
data_cleaned$satjob <- as.factor(data_cleaned$satjob)

# 数据分割：70%训练集，30%测试集
set.seed(42)
trainIndex <- createDataPartition(data_cleaned$happy, p = 0.7, list = FALSE)
trainData <- data_cleaned[trainIndex, ]
testData <- data_cleaned[-trainIndex, ]

# 构建分类树模型（使用所有变量）
tree_model <- rpart(
  happy ~ age + childs + degree + sex + satjob + realrinc,
  data = trainData,
  method = "class",
  control = rpart.control(maxdepth = 5)  # 增加最大深度以捕捉更多模式
)

# 可视化分类树
rpart.plot(
  tree_model,
  type = 2,
  extra = 104,
  fallen.leaves = TRUE,
  box.palette = "Blues",  
  main = "Classification Tree with All Variables"
)

# 在测试集上进行预测
predictions <- predict(tree_model, newdata = testData, type = "class")

# 生成混淆矩阵
conf_matrix <- confusionMatrix(predictions, testData$happy)

# 打印混淆矩阵和统计结果
print(conf_matrix)

# 提取关键信息（如准确率）
cat("Model Accuracy: ", conf_matrix$overall['Accuracy'], "\n")